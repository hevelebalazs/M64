#define HeapType T : #Name ":" X : #Type #as
{
	struct T
	{
		n : int;
		use values : @[#n]X;
	}
}

#define HeapInit(Heap : #Var, n : int, values : #Array) #as
{
	heap.n = n;
	heap.values = values;
}

#define HeapAdd(Heap : #Var, value : #Expression, Cmp : #Expression)
{
	use Heap;
	values[n] = value;
	n++;
	
	at := n - 1;
	while 1
	{
		if at == 0 do break;
		
		parent := (at - 1) / 2;
		if Cmp(__left : values[at], __right : values[parent])
		{
			Swap(values[at], values[parent]);
		}
	}
}

#define HeapPop(Heap : #Var) #as
{
	use heap;
	result := values[0];
	n--;
	values[0] = values[n];
	
	at := 0;
	while 1
	{
		at1 := at;
		#left := 2 * at + 1;
		#right := 2 * at + 2;
		
		if left < n && cmp(values[left], values[at1]): at1 = left;
		if right < n && cmp(values[right], values[at1]): at1 = right;
		
		if at == at1: break;
		
		X tmp = values[at];
		values[at] = values[at1];
		values[at1] = tmp;
		
		at = at1;
	}
		
	return result;
}

HeapType HeapInt : int;
HeapType HeapFloat : float;

HeapGen(HeapIntAsc, int)(#func(a1 : int, a2 : int){return a1 < a2;})
HeapGen(HeapIntDesc, int)(#func(a1 : int, a2 : int){return a1 > a2;})

func test()
{
	heap := HeapIntAscInit;
	HeapInit(heap, a);
	
	v := HeapPop(heap);
}

#c_code
{
	#include <stdio.h>
	
	int main()
	{
		int A[10];
		for(int i = 0; i < 10; i++)
		{
			scanf("%i", &A[i]);
		}
		
		HeapIntAsc heap = HeapIntAscInit(10);
		for(int i = 0; i < 10; i++) HeapIntAscAdd(&heap, A[i]);
		
		for(int i = 0; i < 10; i++)
		{
			int x = HeapIntAscPop(&heap);
			printf("%x\n", x);
		}
		
		HeapIntDesc heap = HeapIntDescInit(10);
		for(int i = 0; i < 10; i++) HeapIntDescAdd(&heap, A[i]);
		
		for(int i = 0; i < 10; i++)
		{
			int x = HeapIntDescPop(&heap);
			printf("%x\n", x);
		}
		
		return 0;
	}
}