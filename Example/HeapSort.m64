#func Swap(T: #type, v1 : @T, v2 : @T)
	tmp := @v1;
	@v1 = @v2;
	@v2 = tmp;
end

type Heap : struct
	#T : #type;
	#Cmp : #func(T, T) bool;
	n : int;
	use values : @[#n]#T;
end

#func HeapInit(heap : @Heap, n : int, values : @heap.T)
	heap.n = n;
	heap.values = values;
end

#func HeapAdd(heap : @Heap, value : heap.T)
	use heap;
	values[n] = value;
	n++;
	
	at := n - 1;
	while 1:
		break if at == 0;
		
		parent := (at - 1) / 2;
		if Cmp(values[at], values[parent]):
			Swap(T, &values[at], &values[parent]);
		end
	end
end

#func HeapPop(heap : @Heap) : heap.T
	use heap;
	result := values[0];
	n--;
	values[0] = values[n];
	
	at := 0;
	while 1:
		at1 := at;
		left := 2 * at + 1;
		right := 2 * at + 2;
		
		if left < n and Cmp(values[left], values[at1]):
			at1 = left;
		end
		if right < n and Cmp(values[right], values[at1]):
			at1 = right;
		end
		
		break if at == at1;
		
		Swap(T, &values[at], &values[at1]);
		
		at = at1;
	end
	
	return result;
end

#func HeapIntAscInit(n : int) Heap
	heap : Heap;
	heap.T = int;
	
	#func IntAsc(a : int, b : int) bool
		return a < b;
	end
	
	heap.Cmp = IntAsc;
	heap.n = n;
	
	return heap;
end

func main() int
	A : int[10];
	for i := 0; i < 10; i++:
		scanf("%i", &A[i]);
	end
	
	heap := HeapIntAscInit(10);
	for i := 0; i < 10; i++:
		HeapAdd(&heap, A[i]);
	end
	
	for i := 0 to < 10:
		x := HeapPop(&heap);
		printf("%i\n", x);
	end
	
	heap2 := HeapIntDescInit(10);
	for i := 0; i < 10; i++:
		HeapAdd(heap2, A[i]);
	end
	
	for i := 0; i < 10; i++:
		x := HeapPop(&heap);
		printf("%i\n", x);
	end
	
	return 0;
end