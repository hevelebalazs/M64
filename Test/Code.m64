struct Bitmap
{
	memory: @uint;
	width: int;
	height: int;
}

func FillWithColor(bitmap: @Bitmap, color: uint)
{
	pixel := bitmap.memory;
	for row := 0; row < bitmap.height; row++
	{
		for col := 0; col < bitmap.width; col++
		{
			pixel@ = color;
			pixel++;
		}
	}
}

func SetPixelColor(bitmap: @Bitmap, row, col: int, color: uint)
{
	bitmap.memory[row * bitmap.width + col] = color;
}

struct float2
{
	x, y: float;
}

struct Quad2
{
	use p:[4]float2;
}

func Float2XY(x, y: float) float2
{
	result: float2;
	result.x = x;
	result.y = y;
	return result;
}

func TurnToRight(v : float2) float2
{
	return Float2XY(-v.y, v.x);
}

operator* mul_float_float2(x: float, v: float2) float2
{
	return Float2XY(x * v.x, x * v.y);
}

operator- sub_float2(p1:float2, p2:float2) float2
{
	return Float2XY(p1.x - p2.x, p1.y - p2.y);
}

operator+ add_float2(p1:float2, p2:float2) float2
{
	return Float2XY(p1.x + p2.x, p1.y + p2.y);
}

func GetRotatedQuadAroundPoint(center: float2, cos_sin: float2, size: float2) Quad2
{
	q:Quad2;
	
	y_dir := cos_sin;
	x_dir := TurnToRight(cos_sin);
	
	to_y := (0.5 * size.y) * y_dir;
	to_x := (0.5 * size.x) * x_dir;
	
	top := center + to_y;
	bottom := center - to_y;
	
	q[0] = top + to_x;
	q[1] = top - to_x;
	q[2] = bottom - to_x;
	q[3] = bottom + to_x;
	
	return q;
}

func TurnsRight(p0, p1, p2: float2) bool
{
	d0 := p1 - p0;
	d1 := p2 - p0;
	
	det := (d0.x * d1.y) - (d0.y * d1.x);
	turns_right := (det < 0.0);
	return turns_right;
}

func IsPointInQuad2(p: float2, q: Quad2) bool
{
	is_inside := true;
	is_inside &= TurnsRight(q[0], q[1], p);
	is_inside &= TurnsRight(q[1], q[2], p);
	is_inside &= TurnsRight(q[2], q[3], p);
	is_inside &= TurnsRight(q[3], q[0], p);
	return is_inside;
}

func DrawQuad2(bitmap: @Bitmap, quad: Quad2, color: uint)
{
	min_x := quad[0].x;
	max_x := quad[0].x;
	min_y := quad[0].y;
	max_y := quad[0].y;
	
	for i := 1; i < 4; i++
	{
		x := quad[i].x;
		y := quad[i].y;
		if x < min_x
		{
			min_x = x;
		}
		if x > max_x
		{
			max_x = x;
		}
		if y < min_y
		{
			min_y = y;
		}
		if y > max_y
		{
			max_y = y;
		}
	}
	
	for row := int::min_y; row < int::max_y + 1; row++
	{
		for col := int::min_x; col < int::max_x + 1; col++
		{
			p := Float2XY(float::col, float::row);
			if IsPointInQuad2(p, quad)
			{
				SetPixelColor(bitmap, row, col, color);
			}
		}
	}
}

func DrawRectMinMax(bitmap: @Bitmap, min_row, min_col, max_row, max_col: int, color: uint)
{
	for row := min_row; row <= max_row; row++
	{
		for col := min_col; col <= max_col; col++
		{
			index := row * bitmap.width + col;
			bitmap.memory[index] = color;
		}
	}
}

struct Input
{
	screen_size: float2;
	time: float;
}

func Min2(x, y : float) float
{
	if x < y
	{
		return x;
	}
	return y;
}

extern func cosf(x: float) float;
extern func sinf(x: float) float;

func Update(input: @Input, bitmap: @Bitmap)
{
	FillWithColor(bitmap, uint::0);

	min_side := 0.5 * Min2(input.screen_size.x, input.screen_size.y);

	mid := 0.5 * input.screen_size;
	side := Float2XY(min_side, min_side);
	
	min := mid - 0.5 * side;
	max := mid + 0.5 * side;
	
	cos_sin := Float2XY(cosf(input.time), sinf(input.time));
	
	quad := GetRotatedQuadAroundPoint(mid, cos_sin, side);
	DrawQuad2(bitmap, quad, uint::0x00FF00);
}