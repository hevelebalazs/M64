struct V2
{
	x, y: Real32;
}

constructor V2(x, y: Real32)
{
	result:V2;
	result.x = x;
	result.y = y;
	return result;
}

operator c:Real32 * v:V2 :V2
{
	result: V2;
	result.x = c * v.x;
	result.y = c * v.y;
	return result;
}

operator v1:V2 + v2:V2 :V2
{
	result: V2;
	result.x = v1.x + v2.x;
	result.y = v1.y + v2.y;
	return result;
}

operator v1:V2 - v2:V2 :V2
{
	result: V2;
	result.x = v1.x - v2.x;
	result.y = v1.y - v2.y;
	return result;
}

struct Body
{
	// TODO: use struct member
	// use position: V2;
	velocity: V2;
	position: V2;
}

func UpdateBody(body: @Body, dt: Real32)
{
	use body;
	// TODO: make sure += works with operator +
	// position += dt * velocity;
	position = position + dt * velocity;
}

struct State
{
	x, y: Int32;
	body: Body;
}

func InitState(state: @State)
{
	use state;
	x = 0;
	y = 0;
	body.position = V2(:Real32(0), :Real32(0));
	body.velocity = V2(:Real32(0), :Real32(0));
}

struct V4
{
	x, y, z, w: Real32;
	#r := x;
	#g := y;
	#b := z;
	#a := w;
}

func Color(r, g, b: Real32): V4
{
	color: V4;
	color.r = r;
	color.g = g;
	color.b = b;
	color.a = 1;
	return color;
}

func ColorToColorCode(color: V4): UInt32
{
	r := :UInt32(color.r * 255);
	g := :UInt32(color.g * 255);
	b := :UInt32(color.b * 255);
	a := :UInt32(color.a * 255);

	code := (a << 24) + (r << 16) + (g << 8) + (b << 0);
	return code;
}

func FloatDiv(a, b: Int32): Real32
{
	r := :Real32(a) / :Real32(b);
	return r;
}

// TODO: create a general pointer type that's like void *
struct MemoryWriter
{
	at:@Int8;
}

/*
TODO: make a meta func for writing any value

#func WriteValue(writer: @MemoryWriter, v: #Value)
{
	use writer;
	#type := v.type;
	:@type(at)@ = v;
	at += #TypeSize(type);
}
*/

func WriteInt32(writer: @MemoryWriter, v: Int32)
{
	use writer;
	:@Int32(at)@ = v;
	at += 4;
}

// TODO: use function param
// func WriteUInt32(use writer: @MemoryWriter, v: UInt32)
func WriteUInt32(writer: @MemoryWriter, v: UInt32)
{
	use writer;
	:@UInt32(at)@ = v;
	at += 4;
}

/*
TODO: write a meta func that takes multiple parameters
Write(w, minx, maxx, miny, maxy, color);

#func Write(w: @MemoryWrite, params: #ParamList)
{
	#for p := in params
	{
		WriteValue(w, p.value);
	}
}
*/

func StopRender(w: @MemoryWriter)
{
	WriteInt32(w, 0);
}

func RenderRect(w: @MemoryWriter, minx, maxx, miny, maxy: Int32, color: V4)
{
	color_code := ColorToColorCode(color);

	WriteInt32(w, 1);
	WriteInt32(w, minx);
	WriteInt32(w, maxx);
	WriteInt32(w, miny);
	WriteInt32(w, maxy);
	WriteUInt32(w, color_code);
}

func Abs(v: Real32) :Real32
{
	result := v;
	if v < 0
	{
		result = -v;
	}

	return result;
}

func SquareRoot(n: Real32) :Real32
{
	l := 0.001;
	x := n;

	root: Real32;

	count := 0;
	while 1
	{
		count++;

		root = 0.5 * (x + (n / x));
		if Abs(root - x) < l
		{
			break;
		}

		x = root;
	}

	return root;
}

func GetV2Length(v: V2) :Real32
{
	length := SquareRoot(v.x * v.x + v.y * v.y);
	return length;
}

func NormalizeV2(v: V2) :V2
{
	length := GetV2Length(v);
	result := (1.0 / length) * v;
	return result;
}

func Draw(width, height: Int32, render_memory:@Int8, state: @State, mouse_x, mouse_y: Int32)
{
	w: MemoryWriter;
	w.at = render_memory;

	background_color := Color(0, 0, 0);
	RenderRect(@w, 0, width, 0, height, background_color);

	use state;

	mouse := V2(:Real32(mouse_x), :Real32(mouse_y));
	body.velocity = NormalizeV2(mouse - body.position);

	dt := 1.0 / 60.0;
	UpdateBody(@body, dt);

	// TODO: make sure type gets inferred properly
	// radius := 25;
	radius := 25.0;

	rect_color := Color(0, 0, 1);

	minx := :Int32(body.position.x - radius);
	maxx := :Int32(body.position.x + radius);
	miny := :Int32(body.position.y - radius);
	maxy := :Int32(body.position.y + radius);

	RenderRect(@w, minx, maxx, miny, maxy, rect_color);

	if x < mouse_x { x++; }
	if x > mouse_x { x--; }

	if y < mouse_y { y++; }
	if y > mouse_y { y--; }

	StopRender(@w);
}